@startuml Use Cases



@enduml


@startuml Player Starts Game



@enduml

@startuml Player Flips Deck



@enduml

@startuml Player Moves Card From Waste to Tableau
:Open Game;
repeat :Player Selects Card in Waste;
repeat while (Valid Card?) is (no)
repeat :Player Selects Card in Tableau;
repeat while (Valid Card?) is (no)
:Display Movement;
:Open Game;
@enduml

@startuml States Player Moves Card From Waste to Tableau
hide empty description
[*] --> OpenGame
OpenGame --> Movement : Player Selects Card in Waste
state choice <<choice>>
Movement --> choice : Is valid card?
choice --> Movement : No
choice --> Destination : Yes
state choice1 <<choice>>
Destination --> choice1 : Is valid destination?
choice1 --> DisplayMovement : Yes
choice1 --> Destination : No
DisplayMovement --> OpenGame
@enduml





@startuml Player Request Random Movement
:**Open Game**;
:Player Selects Hint;
:System Calculates Random Legal Movement;
:Display Movement;

if (Game Finished?) then (no)
  :**Open Game**;
  stop
else
  if (Has Win?) then (yes)
    :Show Win;
  else (no)
    :Show Lost;
  endif
  :**Close Game**;
  stop
endif
@enduml

@startuml States Request Random Movement
hide empty description
OpenGame --> S1 : Player selects Hint
S1 --> S2 : Show Game after computed movement
state choice <<choice>>
S2 --> choice : Is game finished?
choice --> S3 : yes
choice --> OpenGame: no
state choice2 <<choice>>
S3 --> choice2 : Has won?
choice2 --> S4 : No
S4 --> GameClosed : System show Lost
choice2 --> S5 : Yes
S5 --> GameClosed : System show Win
@enduml

@startuml Player Restarts Game



@enduml

@startuml Player Exits Game
:**OpenGame**;
:Player selects Exit;
:System close application;
end
@enduml

@startuml States Player Exits Game
hide empty description
OpenGame --> S1 : Player Selects Exit
S1 --> [*] : System close application
@enduml

